from telegram import Update, Message
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from bots.base_bot import BaseBot
import os

class ArgManagerBot(BaseBot):
    def __init__(self, logger, redis_helper):
        super().__init__(logger, redis_helper)
        self.waiting_for_message = set()
        self.broadcast_password = os.getenv("MANAGER_PASSWORD")
        self.channel_id = int(os.getenv("SOURCE_CHANNEL_ID"))
        if not self.broadcast_password:
            raise RuntimeError("MANAGER_PASSWORD is not set in environment variables")

    def register_handlers(self, app: Application) -> None:
        app.add_handler(CommandHandler("start", self.handle_start))
        app.add_handler(CommandHandler("auth", self.handle_auth))
        app.add_handler(CommandHandler("send", self.handle_send))
        app.add_handler(CommandHandler("top", self.handle_top))
        app.add_handler(CommandHandler("clear", self.handle_clear))
        app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, self.handle_message))
        app.add_handler(MessageHandler(filters.UpdateType.CHANNEL_POST, self.handle_channel_post))

    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç.\n"
            "/auth <password> ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n"
            "/send ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        )

    async def handle_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auth <password>")
            return

        password = context.args[0]
        if password == self.broadcast_password:
            chat_id = update.effective_chat.id
            self.redis.authorize_chat(chat_id)
            await update.message.reply_text("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

    async def handle_send(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        chat_id = update.effective_chat.id
        if not self.redis.is_authorized(chat_id):
            await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.")
            return

        self.logger.info(f'–ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}');

        self.waiting_for_message.add(chat_id)
        await update.message.reply_text("–ñ–¥—É –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ –∏ —Ç.–¥.).")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message: Message = update.message
        chat_id = update.effective_chat.id

        self.logger.info(f'–ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —á–∞—Ç–µ {chat_id}, —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è: {self.waiting_for_message}');

        # if it's a /send flow, keep old behavior
        if chat_id in self.waiting_for_message:
            self.waiting_for_message.remove(chat_id)
            message_dict = message.to_dict()
            self.redis.publish_raw_dict({
                "content_type": "message_dict",
                "message": message_dict
            })
            return

    async def handle_top(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        chat_id = update.effective_chat.id
        if not self.redis.is_authorized(chat_id):
            await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.")
            return

        metrics = self.redis.get_all_metrics()
        if not metrics:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        top_list = sorted(metrics, key=lambda x: x.get("count", 0), reverse=True)

        response_lines = []
        response_length = 0
        
        i = 1
        for item in top_list:
            title = item.get("title", "")
            username = item.get("username", "")
            count = item.get("count", 0)
            inviteLink = item.get("invite_link", "")
            response_line = ''

            if response_length == 10: 
              break;

            if inviteLink and title:
                response_line = f'{i}. <a href="{inviteLink}">{title}</a> ‚Äî {count}'
                i += 1
                response_length += 1
            elif title:
                response_line = f'{i}. {title} ‚Äî {count}'
                i += 1
                response_length += 1
            elif username:
                continue;
            
            response_lines.append(response_line)

        response_text = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n" + "\n".join(response_lines)
        await update.message.reply_text(response_text, parse_mode="HTML")

    async def handle_clear(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        if not self.redis.is_authorized(chat_id):
            await update.message.reply_text("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth.")
            return

        count = self.redis.reset_all_counts()
        await update.message.reply_text(
            f"–°—á—ë—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ 0 –¥–ª—è {count} —á–∞—Ç–æ–≤."
        )

    async def handle_channel_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message: Message = update.channel_post
        if not message:
            return

        if message.chat.id == self.channel_id:
            self.logger.info(f"–ü–æ–π–º–∞–ª–∏ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ {self.channel_id}, msg_id={message.message_id}")
            self.redis.publish_raw_dict({
                "content_type": "forward_from_channel",
                "from_chat_id": self.channel_id,
                "message_id": message.message_id,
            })
